openapi: '3.0.0'
info: 
  title: Linktree Clone Api
  version: '1.0.0'

servers:
  - url: http://localhost:8080/api

paths: 
  /auth/me: 
    get:
      summary: Authenticate the current user
      tags: 
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AuthResponse'

  /auth/register:
    post:
      summary: Register a user
      tags: 
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'payload.yaml#/components/schemas/UsernameEmailAndPassword'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AuthResponse'
                
  /auth/login: 
    post:
      summary: Login a potential user
      tags: 
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'payload.yaml#/components/schemas/UsernameAndPassword'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AuthResponse'

  /auth/logout:
    post:
      summary: Log out the current user
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AuthResponse'

  /admin/links:
    get:
      summary: Get all links for the current user
      tags:
        - Links
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: 'links.yaml#/components/schemas/Link'
    
    post:
      summary: Add a new link
      tags:
        - Links
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'payload.yaml#/components/schemas/LinkPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean 
  
  /admin/links/paginated:
    get:
      summary: Get a paginated list of links for the current user
      tags:
        - Links
      parameters:
        - in: query
          name: pageCount
          schema:
            type: integer
        - in: query
          name: pageNumber
          schema: 
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLinksResponse'
      
  /admin/links/paginated-sorted:
    get:
      summary: Get a sorted, paginated list of links for the current user
      tags:
        - Links
      parameters:
        - in: query
          name: pageCount
          schema:
            type: integer
        - in: query
          name: pageNumber
          schema: 
            type: integer
        - in: query
          name: sortKey
          schema:
            type: string
        - in: query
          name: order
          schema: 
            type: string
            enum: [ASC, DESC]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLinksResponse'

  /admin/link/{id}:
    delete:
      summary: Delete a link
      tags:
        - Links
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Numeric ID of the link to be deleted
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean 
                
    put:
      summary: Add a new link
      tags:
        - Links
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the link to be updated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'payload.yaml#/components/schemas/LinkPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkResponse'

  /user/{username}:
    get: 
      summary: Get a user's info including their links
      tags: 
        - Users
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: The user's username
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithLinksResponse'
  
  /user/{username}/paginated:
    get: 
      summary: Get a user's info including a pagination of their links
      tags: 
        - Users
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: The user's username
        - in: query
          name: pageCount
          schema:
            type: integer
        - in: query
          name: pageNumber
          schema: 
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithLinksResponse'

  /user/{username}/paginated-sorted:
    get: 
      summary: Get a user's info including a sorted paginated of their links
      tags: 
        - Users
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: The user's username
        - in: query
          name: pageCount
          schema:
            type: integer
        - in: query
          name: pageNumber
          schema: 
            type: integer
        - in: query
          name: sortKey
          schema:
            type: string
        - in: query
          name: order
          schema: 
            type: string
            enum: [ASC, DESC]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithLinksResponse'
      
security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          oneOf:
            - $ref: 'error.yaml#/components/schemas/Error'
            - $ref: 'error.yaml#/components/schemas/MultipleErrors'
          nullable: true
      required:
        - error
    
    LinksResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: 'links.yaml#/components/schemas/Link'
              nullable: true
          required:
            - data

    LinkResponse:
      allOf: 
        - '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            data:
              $ref: 'links.yaml#/components/schemas/Link'
              nullable: true
          required:
            - data
        
    PaginatedLinksResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            data:
              $ref: 'links.yaml#/components/schemas/PaginatedLinks'
              nullable: true
          required:
            - data
    
    UserWithLinks:
      allOf: 
        - $ref: 'auth.yaml#/components/schemas/User'
        - type: object
          properties:
            resources:
              type: array
              items: 
                $ref: 'links.yaml#/components/schemas/Link'
          required:
            - resources

    UserWithPaginatedLinks:
      allOf: 
        - $ref: 'auth.yaml#/components/schemas/User'
        - type: object
          properties:
            resources:
              $ref: 'links.yaml#/components/schemas/PaginatedLinks'
          required:
            - resources
    
    UserWithLinksResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            data:
              oneOf:
                - $ref: '#/components/schemas/UserWithLinks'
                - $ref: '#/components/schemas/UserWithPaginatedLinks'
              nullable: true
          required:
            - data

    AuthResponse:
      type: object
      properties:
        data:
          oneOf:
            - $ref: 'auth.yaml#/components/schemas/User'
            - $ref: 'auth.yaml#/components/schemas/JwtUser'
            - $ref: 'error.yaml#/components/schemas/Message'
          nullable: true
        error:
          oneOf:
            - $ref: 'error.yaml#/components/schemas/Error'
            - $ref: 'error.yaml#/components/schemas/MultipleErrors'
          nullable: true
